name: C/C++ CI

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:

  # compile with oldest gcc4.9 which supports (most of)C++14
  build-gcc49:

    runs-on: ubuntu-latest
    name: Build with gcc 4.9 
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: CmakeAndBuild
        run: |
            sudo apt-add-repository -y 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial main'
            sudo apt-add-repository -y 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe'
            sudo apt-get update
            sudo apt-get install -y build-essential
            sudo apt-get install -y gcc-4.9 g++-4.9 gcc-4.9-multilib
            ./scripts/bootstrap-gcc-49.sh
            cd build-gcc49
            make VERBOSE=1

  # compile with older gcc5
  build-gcc5:

    runs-on: ubuntu-latest
    name: Build with gcc 5

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: CmakeAndBuild
        run: |
            sudo apt-add-repository -y 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial main'
            sudo apt-add-repository -y 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe'
            sudo apt-get update
            sudo apt-get install -y build-essential
            sudo apt-get install -y gcc-5 g++-5
            ./scripts/bootstrap-gcc-5.sh
            cd build-gcc5
            make VERBOSE=1

  # Cross-compile for aarch64 linux target
  build-cross-aarch64:

    runs-on: ubuntu-latest
    name: Build on cross aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: CmakeAndBuild
        run: |
            sudo apt-get update
            sudo apt-get install -y build-essential
            sudo apt-get install -y gcc-8-aarch64-linux-gnu g++-8-aarch64-linux-gnu
            ./scripts/bootstrap-gcc-aarch64-cross.sh
            cd build-cross
            make VERBOSE=1

  # Windows(x64) + Visual Studio 2019 build
  build-windows-msvc:

    runs-on: windows-latest
    name: Build for Windows(x64, MSVC)

    # Use system installed cmake
    # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Configure
        run: .\vcsetup.bat
      - name: Build
        run: cmake --build build --config Release

  # Windows(32bit) + Visual Studio 2019 build
  build-windows-msvc-win32:

    runs-on: windows-latest
    name: Build for Windows(Win32, MSVC)

    # Use system installed cmake
    # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Configure
        run: .\vcsetup-32bit.bat
      - name: Build
        run: cmake --build build_win32 --config Release

  # Android(aarch64) build
  build-android:

    runs-on: ubuntu-latest
    name: Build for Android(arm64v8a)
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Show android sdk root
        run: |
            env | grep ANDROID
            echo $ANDROID_SDK_ROOT
      - name: Setup
        run: |
            sudo apt-get install -y ninja-build tree
      - name: Show android sdk details
        run: |
            tree $ANDROID_SDK_ROOT
      - name: CmakeAndBuild
        run: |
            ./scripts/bootstrap-android-cmake-linux.sh
            cd build-android
            ninja -v

  # iOS build
  build-ios:

    runs-on: macos-latest
    name: Build for iOS

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: List up iPhone platform
        run: |
            ls -la /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs
      - name: CmakeAndBuild
        run: |
            ./scripts/bootstrap-aarch64-ios.sh
            cd build-aarch64-cross
            make VERBOSE=1


  # Build with OpenSubdiv
  build-osd:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: configure
      run: ./scripts/bootstrap-cmake-linux-with-osd.sh
    - name: make
      run: cd build && make

  # 32bit build(Linux only)
  build-32bit:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
          sudo apt update
          sudo apt-get install -y gcc-multilib g++-multilib
    - name: configure
      run: ./scripts/bootstrap-cmake-linux-32bit.sh
    - name: make
      run: cd build_m32 && make

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: configure
      run: ./scripts/bootstrap-cmake-linux.sh
    - name: make
      run: cd build && make
